/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
var HL;
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/Interpreter.js":
/*!****************************!*\
  !*** ./src/Interpreter.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Interpreter: () => (/* binding */ Interpreter)\n/* harmony export */ });\n/* harmony import */ var _Parser_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Parser.js */ \"./src/Parser.js\");\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Tokenizer.js */ \"./src/Tokenizer.js\");\n\r\n\r\n\r\nclass ReturnError extends Error {\r\n    constructor(value) {\r\n        super(\"Returning from function\");\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass Enviourment {\r\n    constructor(parent) {\r\n        this.parent = parent;\r\n        this.variables = {};\r\n    }\r\n    resolveGet(variable) {\r\n        if (variable in this.variables) {\r\n            return this.variables[variable];\r\n        } else if (this.parent != null) {\r\n            return this.parent.resolveGet(variable);\r\n        }\r\n        return undefined;\r\n    }\r\n    resolveSet(variable, value) {\r\n        if (variable in this.variables) {\r\n            this.variables[variable] = value;\r\n            return true;\r\n        } else if (this.parent != null) {\r\n            return this.parent.resolveSet(variable, value);\r\n        }\r\n        return false;\r\n    }\r\n    isDeclared(variable) {\r\n        return variable in this.variables;\r\n    }\r\n    declare(variable) {\r\n        this.variables[variable] = null;\r\n    }\r\n}\r\n\r\nclass Interpreter {\r\n    constructor(statements, out) {\r\n        this.statements = statements;\r\n        this.globalEnv = new Enviourment(null);\r\n        this.currEnv = this.globalEnv;\r\n        this.out = out;\r\n    }\r\n    run() {\r\n        for(let statement of this.statements) {\r\n            this.evaluate(statement);\r\n        }\r\n    }\r\n\r\n    evaluate(statement) {\r\n        // console.log(\"evaluating\", statement);\r\n        switch(statement.type) {\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.INBUILT_CALL:\r\n                return this.inbuiltcall(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.BINARY_OP:\r\n                return this.evalBinary(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.UNARY_OP:\r\n                return this.evalUnary(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.GROUPING:\r\n                return this.evaluate(statement.expr);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.STRING:\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.NONE:\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.BOOLEAN:\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.NUMBER:\r\n                return statement.value;\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.IDENTIFIER:\r\n                return this.currEnv.resolveGet(statement.value);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.BLOCK:\r\n                return this.evaluateBlock(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.IFSTATEMENT:\r\n                return this.evaluateIfStatement(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.VARDECLARATION:\r\n                return this.evaluateVarDeclaration(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.WHILELOOP:\r\n                return this.evaluateWhileLoop(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.FORLOOP:\r\n                return this.evaluateForLoop(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.VAREXPRLIST:\r\n                return this.evaluateVarExprList(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.FUNDECLARE:\r\n                return this.evaluateFunDeclaration(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.FUNCALL:\r\n                return this.evaluateFunCall(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.EXPRLIST:\r\n                return this.evaluateExprList(statement);\r\n            case _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.RETURNSTMT:\r\n                return this.evaluateReturnStatement(statement);\r\n        }\r\n    }\r\n\r\n    evaluateReturnStatement(statement) {\r\n        throw new ReturnError(this.evaluate(statement.exprList));\r\n    }\r\n\r\n    evaluateExprList(statement) {\r\n        if (statement.list.length !== 1) throw new Error(\"Can't have Have an expression list without assigment\");\r\n        return this.evaluate(statement.list[0]);\r\n    }\r\n\r\n    evaluateFunCall(statement) {\r\n        let evaluatedList = [];\r\n\r\n        let returnEnv = this.currEnv;\r\n\r\n        for (let expr of statement.exprList.list) {\r\n            evaluatedList.push(this.evaluate(expr));\r\n        }\r\n\r\n        let fun = this.currEnv.resolveGet(statement.name);\r\n\r\n        if (!fun || fun.type !== _Parser_js__WEBPACK_IMPORTED_MODULE_0__.NodeTypes.FUNDECLARE) throw new Error(\"Undefined function.\");\r\n\r\n        // console.log(fun.body.statements[1].exprList.list);\r\n        this.currEnv = fun.parent; // closure\r\n\r\n        this.currEnv = new Enviourment(this.currEnv);\r\n\r\n        for (let i = 0; i < fun.parameters.length; i++) {\r\n            let v = fun.parameters[i];\r\n            this.currEnv.declare(v.identifier);\r\n            if (v.value) this.currEnv.resolveSet(v.identifier, this.evaluate(v.value));\r\n            this.currEnv.resolveSet(v.identifier, evaluatedList[i]);\r\n        }\r\n        let r = null;\r\n        try {\r\n            this.evaluate(fun.body);\r\n        } catch (err) {\r\n            r = err.value;\r\n        }\r\n        this.currEnv = this.currEnv.parent;\r\n        this.currEnv = returnEnv;\r\n        return r;\r\n    }\r\n    evaluateFunDeclaration(statement) {\r\n        statement.parent = this.currEnv;\r\n        this.currEnv.declare(statement.name);\r\n        this.currEnv.resolveSet(statement.name, statement);\r\n    }\r\n\r\n    evaluateVarExprList(statement) {\r\n        for (let s of statement.list) {\r\n            this.evaluate(s);\r\n        }\r\n    }\r\n\r\n    evaluateForLoop(statement) {\r\n        this.currEnv = new Enviourment(this.currEnv);\r\n\r\n        for(this.evaluate(statement.initialisation);\r\n        this.evaluate(statement.condition);\r\n        this.evaluate(statement.increment)) {\r\n            this.evaluate(statement.block);\r\n        }\r\n        this.currEnv = this.currEnv.parent;\r\n    }\r\n\r\n    evaluateWhileLoop(statement) {\r\n        while (this.evaluate(statement.condition)) {\r\n            this.evaluate(statement.block);\r\n        }\r\n    }\r\n    evaluateVarDeclaration(statement) {\r\n        let e = null;\r\n        if (statement.value) e = this.evaluate(statement.value);\r\n        this.currEnv.declare(statement.identifier);\r\n        this.currEnv.resolveSet(statement.identifier, e);\r\n    }\r\n    evaluateIfStatement(statement){\r\n        let e = this.evaluate(statement.condition);\r\n        if (e) {\r\n            this.evaluate(statement.statements);\r\n        } else {\r\n            if (statement.else_statements) this.evaluate(statement.else_statements);\r\n        }\r\n    }\r\n    evaluateBlock(block) {\r\n        this.currEnv = new Enviourment(this.currEnv);\r\n        for (let s of block.statements) {\r\n            this.evaluate(s);\r\n        }\r\n        this.currEnv = this.currEnv.parent;\r\n    }\r\n    inbuiltcall(statement) {\r\n        switch(statement.name.type) {\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.PRINT:\r\n                let t = []\r\n                for (let operand of statement.operands.list) {\r\n                    t.push(this.evaluate(operand));\r\n                }\r\n                for (let i of t) {\r\n                    this.printValue(i);\r\n                }\r\n        }\r\n    }\r\n    printValue(value) {\r\n        if (value === null) this.out.value += \"None\";\r\n        else if (value === true) this.out.value += \"True\";\r\n        else if (value === false) this.out.value +=\"False\";\r\n        else this.out.value += value;\r\n    }\r\n    evalBinary(statement) {\r\n        switch(statement.op.type) {\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.ADD:\r\n                return this.evaluate(statement.left)  + this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.MINUS:\r\n                return this.evaluate(statement.left)  - this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.DIV:\r\n                return this.evaluate(statement.left)  / this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.MUL:\r\n                let left = this.evaluate(statement.left);\r\n                let right = this.evaluate(statement.right);\r\n                if (typeof left === typeof \"\" && typeof right == typeof 1) {\r\n                    if (Number.isInteger(right) && right >= 0) {\r\n                        let result = \"\";\r\n                        for (let i = 0; i < right; i++) {\r\n                            result += left;\r\n                        }\r\n                        return result;\r\n                    } else throw new Error(\"Can not multiply string with a non-integer number.\");\r\n                }\r\n                return left * right;\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.EQUAL_EQUAL:\r\n                return this.evaluate(statement.left) === this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.BANG_EQUAL:\r\n                return this.evaluate(statement.left) !== this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.GREATER_THAN:\r\n                return this.evaluate(statement.left)  > this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.GREATER_THAN_EQUAL_TO:\r\n                return this.evaluate(statement.left)  >= this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.LESS_THAN:\r\n                return this.evaluate(statement.left)  < this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.LESS_THAN_EQUAL_TO:\r\n                return this.evaluate(statement.left)  <= this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.OR:\r\n                return this.evaluate(statement.left)  || this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.AND:\r\n                return this.evaluate(statement.left)  && this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.EQUAL:\r\n                let list = [];\r\n                for (let item of statement.right.list) {\r\n                    list.push(this.evaluate(item));\r\n                }\r\n                for (let i = 0; i < statement.left.list.length; i++) {\r\n                    let t = this.currEnv.resolveSet(statement.left.list[i].value, list[i]);\r\n                    if (!t) throw new Error(\"Variable not defined.\", statement.left.list[i]);\r\n                }\r\n                return statement.left;\r\n        }\r\n    }\r\n    evalUnary(statement) {\r\n        switch(statement.op) {\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.NOT:\r\n                return ! this.evaluate(statement.right);\r\n            case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_1__.TokenTypes.MINUS:\r\n                return - this.evaluate(statement.right);\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://HL/./src/Interpreter.js?");

/***/ }),

/***/ "./src/Parser.js":
/*!***********************!*\
  !*** ./src/Parser.js ***!
  \***********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   NodeTypes: () => (/* binding */ NodeTypes),\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   Value: () => (/* binding */ Value)\n/* harmony export */ });\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ \"./src/Tokenizer.js\");\n\r\n\r\nclass ASTNode {\r\n    constructor(type) {\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nlet NodeTypes = Object.freeze({\r\n    STRING: 1,\r\n    NUMBER: 2, \r\n    BOOLEAN: 3,\r\n    NONE: 4,\r\n    VARDECLARATION: 5,\r\n    BINARY_OP: 6,\r\n    UNARY_OP: 7,\r\n    GROUPING: 8,\r\n    INBUILT_CALL: 9,\r\n    IFSTATEMENT: 10,\r\n    BLOCK: 11,\r\n    IDENTIFIER: 12,\r\n    WHILELOOP: 13,\r\n    FORLOOP: 14,\r\n    EXPRLIST: 15,\r\n    VAREXPRLIST: 16,\r\n    FUNDECLARE: 17,\r\n    FUNCALL: 18,\r\n    RETURNSTMT: 19,\r\n})\r\n\r\n\r\nclass Block extends ASTNode {\r\n    constructor(statements) {\r\n        super(NodeTypes.BLOCK);\r\n        this.statements = statements;\r\n    }\r\n}\r\n\r\nclass Value extends ASTNode {\r\n    constructor(type, value) {\r\n        super(type);\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass VarExprList extends ASTNode {\r\n    constructor(list) {\r\n        super(NodeTypes.VAREXPRLIST);\r\n        this.list = list;\r\n    }\r\n}\r\n\r\nclass FunctionDeclaration extends ASTNode {\r\n    constructor(name, parameters, body) {\r\n        super(NodeTypes.FUNDECLARE);\r\n        this.name = name;\r\n        this.parameters = parameters;\r\n        this.body = body;\r\n        this.parent = null;\r\n    }\r\n}\r\n\r\nclass BinaryOperation extends ASTNode {\r\n    constructor(left, right, op) {\r\n        super(NodeTypes.BINARY_OP);\r\n        this.right = right;\r\n        this.left = left;\r\n        this.op = op\r\n    }\r\n    isAssignable() {\r\n        return typeof this.right == ExprList && this.right.isAssignable();\r\n    }\r\n}\r\n\r\nclass Grouping extends ASTNode {\r\n    constructor(expr)  {\r\n        super(NodeTypes.GROUPING);\r\n        this.expr = expr;\r\n    }\r\n}\r\n\r\nclass UnaryOperation extends ASTNode {\r\n    constructor(right, op) {\r\n        super(NodeTypes.UNARY_OP);\r\n        this.right = right;\r\n        this.op = op;\r\n    }\r\n}\r\n\r\nclass WhileLoop extends ASTNode {\r\n    constructor(condition, block) {\r\n        super(NodeTypes.WHILELOOP);\r\n        this.condition = condition;\r\n        this.block = block;\r\n    }\r\n}\r\n\r\nclass VarDeclaration extends ASTNode {\r\n    constructor(type, identifier, value) {\r\n        super(type);\r\n        this.identifier = identifier;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nclass InBuiltFunctionCalls extends ASTNode {\r\n    constructor(name, operands) {\r\n        super(NodeTypes.INBUILT_CALL);\r\n        this.name = name;\r\n        this.operands = operands;\r\n    }\r\n}\r\n\r\nclass ReturnStatement extends ASTNode {\r\n    constructor(exprList) {\r\n        super(NodeTypes.RETURNSTMT);\r\n        this.exprList = exprList;\r\n    }\r\n}\r\n\r\nclass ForLoop extends ASTNode {\r\n    constructor(initialisation, condition, increment, block) {\r\n        super(NodeTypes.FORLOOP);\r\n        this.initialisation = initialisation;\r\n        this.condition = condition;\r\n        this.increment = increment;\r\n        this.block = block;\r\n    }\r\n}\r\n\r\nclass FunctionCall extends ASTNode {\r\n    constructor(name, exprlist) {\r\n        super(NodeTypes.FUNCALL);\r\n        this.name = name;\r\n        this.exprList = exprlist;\r\n    }\r\n}\r\n\r\nclass ExprList extends ASTNode {\r\n    constructor(list) {\r\n        super(NodeTypes.EXPRLIST);\r\n        this.list = list;\r\n    }\r\n    isAssignable() {\r\n        for (let item of this.list) {\r\n            if (item.type != NodeTypes.IDENTIFIER) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n}\r\n\r\nclass IfStatement extends ASTNode {\r\n    constructor(condition, statements, else_statements) {\r\n        super(NodeTypes.IFSTATEMENT);\r\n        this.condition = condition;\r\n        this.statements = statements;\r\n        this.else_statements = else_statements;\r\n    }\r\n}\r\n\r\nclass Parser {\r\n    constructor(tokens) {\r\n        this.tokens = tokens;\r\n        this.statements = [];\r\n        this.currToken = 0;\r\n        this.funScope = 0;\r\n    }\r\n    run() {\r\n        while(this.currToken  < this.tokens.length) {\r\n            try {\r\n                this.statements.push(this.statement());\r\n            } catch (err) {\r\n                console.log(err);\r\n                this.synchronize();\r\n            }\r\n        }\r\n        return this.statements;\r\n    }\r\n\r\n    statement() {\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.VAR)) {\r\n            let v = this.varDeclaration();\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expected an end of line token\");\r\n            return v;\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.PRINT)) {\r\n            return this.printStatement();\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.IF)) {\r\n            return this.ifStatement();\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_CURLY)) {\r\n            return this.block();\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.WHILE)) {\r\n            return this.whileLoop();\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FOR)) {\r\n            return this.forLoop();\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FUNCTION)) {\r\n            return this.funDeclaration();\r\n        } if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.RETURN)) {\r\n            return this.returnStatement();\r\n        }\r\n        let e = this.expression();\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expected a statement\");\r\n        return e;\r\n    }\r\n\r\n    returnStatement() {\r\n        if (this.funScope === 0) throw new Error(\"You can only use Return statement inside a function\");\r\n        let e = this.expressionList();\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expected an end of line token.\");\r\n        return new ReturnStatement(e);\r\n    }\r\n\r\n    funDeclaration() {\r\n        this.funScope++;\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.IDENTIFIER, \"Expected an identifier.\");\r\n        let i = this.previous().literal;\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS, \"Expect '('.\");\r\n        let varlist = this.parameterList();\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Expect ')'.\")\r\n        let b = null;\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_CURLY)) b = this.block();\r\n        this.funScope--;\r\n        return new FunctionDeclaration(i, varlist, b);\r\n    }\r\n\r\n    parameterList() {\r\n        let list = [];\r\n        if (this.check(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS)) return list;\r\n        do{\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.VAR, \"Expected a variable declaration\");\r\n            list.push(this.varDeclaration());\r\n        } while (!this.isAtEnd() && this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.COMMA));\r\n\r\n        if (this.isAtEnd()) throw new Error(\"Unexpected end of stream.\");\r\n\r\n        return list;\r\n    }\r\n\r\n    forLoop() {\r\n        let d = null;\r\n        let condition = null;\r\n        let increment = null;\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS, \"Expect '('.\");\r\n        if (!this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END)) {\r\n            d = this.varDeclarationAndExprList();\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expected End of line\");\r\n        }\r\n        if (!this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END)) {\r\n            condition = this.or();\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expected End of Line.\");\r\n        }\r\n        if (!this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS)) {\r\n            increment = this.assign();\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Expected ')'.\");\r\n        }\r\n        let statement = this.statement();\r\n\r\n        return new ForLoop(d, condition, increment, statement);\r\n\r\n    }\r\n\r\n    expressionList() {\r\n        let list = [];\r\n        list.push(this.or());\r\n        while(!this.isAtEnd() && this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.COMMA)) {\r\n            list.push(this.or());\r\n        }\r\n        if (this.isAtEnd()) throw new Error(\"Unexpected end of stream\");\r\n        return new ExprList(list);\r\n    }\r\n\r\n    whileLoop() {\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS, \"Expect '('\");\r\n        let condition = this.or();\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Expect ')'\");\r\n        let b = this.statement();\r\n        return new WhileLoop(condition, b);\r\n    }\r\n\r\n    varDeclarationAndExprList() {\r\n        let list = []\r\n        do {\r\n            if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.VAR)) list.push(this.varDeclaration());\r\n            else list.push(this.or());\r\n        } while ((!this.isAtEnd() && this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.COMMA)));\r\n        console.log(list);\r\n        if (this.isAtEnd()) throw new Error(\"unexpected end of stream.\");\r\n        return new VarExprList(list);\r\n    }\r\n\r\n    varDeclaration() {\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.IDENTIFIER)) {\r\n            let i = this.previous().literal;\r\n            let e = null;\r\n            if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.EQUAL)) {\r\n                e = this.or();\r\n            }\r\n            return new VarDeclaration(NodeTypes.VARDECLARATION, i, e);\r\n        }\r\n        throw new Error(\"Expected an identifer in variable declaration.\");\r\n    }\r\n\r\n    block() {\r\n        let statments = [];\r\n        while(!this.isAtEnd() && !this.check(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_CURLY)) {\r\n            statments.push(this.statement());\r\n        }\r\n        if (this.isAtEnd()) throw new Error(\"Unexpected end of stream\");\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_CURLY, \"Expect '}'\");\r\n        return new Block(statments);\r\n    }\r\n\r\n    ifStatement() {\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS, \"Expect '(' after if.\");\r\n        let e = this.expression();\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Except ')' after expression.\");\r\n        let b = this.statement();\r\n        let else_block = null;\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.ELSE)) {\r\n            else_block = this.statement();\r\n        }\r\n        return new IfStatement(e, b, else_block);\r\n    }\r\n\r\n    printStatement() {\r\n        let op = this.previous();\r\n        // console.log(\"parsing operands\");\r\n        // operands.push(this.expression());\r\n        // while (this.match(TokenTypes.COMMA)) {\r\n        //     operands.push(this.expression());\r\n        // }\r\n        let exprList = this.expressionList()\r\n        // console.log(operands);\r\n        this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END, \"Expect Line End after print statement.\");\r\n        return new InBuiltFunctionCalls(op, exprList);\r\n    }\r\n\r\n    expression() {\r\n        return this.assign();\r\n    }\r\n\r\n    assign() {\r\n        let e1 = this.expressionList();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.EQUAL)) {\r\n            let t = this.previous();\r\n            let right = this.expressionList();\r\n            if (e1.isAssignable()) {\r\n                e1 =  new BinaryOperation(e1, right, t);\r\n            } else {\r\n                throw new Error(\"Unable to assign value to non-variable\");\r\n            }\r\n        }\r\n        return e1;\r\n    }\r\n\r\n    synchronize() {\r\n        this.advance();\r\n        while (!this.isAtEnd()) {\r\n            if (this.previous.type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LINE_END) return;\r\n\r\n            switch(this.peek().type) {\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLASS:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FUNCTION:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.VAR:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.IF:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FOR:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.RETURN:\r\n                case _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.WHILE:\r\n                    return;\r\n            }\r\n\r\n            this.advance();\r\n        }\r\n    }\r\n\r\n    equality() {\r\n        let e1 = this.comparison();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.BANG_EQUAL) || this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.EQUAL_EQUAL)) {\r\n            let t = this.previous();\r\n            let right = this.comparison();\r\n            e1 = new BinaryOperation(e1, right, t);\r\n        }\r\n        return e1;\r\n    }\r\n\r\n    or() {\r\n        let e1 = this.and();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OR)) {\r\n            let t = this.previous();\r\n            let right = this.and();\r\n            e1 = new BinaryOperation(e1, right, t);\r\n        }\r\n        return e1;\r\n    }\r\n\r\n    and() {\r\n        let e1 = this.equality();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.AND)) {\r\n            let t = this.previous();\r\n            let right = this.equality();\r\n            e1 = new BinaryOperation(e1, right, t);\r\n        }\r\n        return e1;\r\n    }\r\n\r\n    comparison() {\r\n        let e1 = this.term();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.GREATER_THAN, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LESS_THAN, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.GREATER_THAN_EQUAL_TO, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.LESS_THAN_EQUAL_TO)) {\r\n            let op = this.previous();\r\n            let right = this.term();\r\n            e1 = new BinaryOperation(e1, right, op);\r\n        }\r\n\r\n        return e1;\r\n    }\r\n\r\n    term() {\r\n        let e1 = this.factor();\r\n\r\n        while(this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.ADD, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.MINUS)) {\r\n            let op = this.previous();\r\n            let r = this.factor();\r\n            e1 = new BinaryOperation(e1, r, op);\r\n        }\r\n\r\n        return e1;\r\n    }\r\n    factor() {\r\n        let e1 = this.unary();\r\n\r\n        while (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.DIV, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.MUL)) {\r\n            let op = this.previous();\r\n            let r = this.unary();\r\n            e1 = new BinaryOperation(e1, r, op);\r\n        }\r\n        return e1;\r\n    }\r\n\r\n    unary() {\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.NOT, _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.MINUS)) {\r\n            let op = this.previous();\r\n            let r = this.unary();\r\n            return new UnaryOperation(r, op);\r\n        }\r\n\r\n        return this.primary();\r\n    }\r\n    primary() {\r\n        // console.log(\"parsing primary :\" , this.isAtEnd());\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FALSE)) return new Value(NodeTypes.BOOLEAN, false);\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.TRUE)) return new Value(NodeTypes.BOOLEAN, true);\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.NONE)) return new Value(NodeTypes.NONE, null);\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.STRING)) return new Value(NodeTypes.STRING, this.previous().literal);\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.NUMBER)) return new Value(NodeTypes.NUMBER, Number(this.previous().literal));\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.IDENTIFIER)) {\r\n            let identifer = this.previous().literal;\r\n            if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS)) {\r\n                \r\n                let el = new ExprList([]);\r\n                if (!this.check(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS)) el = this.expressionList();\r\n                this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Expected ')'\");\r\n                return new FunctionCall(identifer, el);\r\n            }\r\n            return new Value(NodeTypes.IDENTIFIER, identifer);\r\n        }\r\n        if (this.match(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.OPEN_PARANTHESIS)) {\r\n            let e1 = this.expression();\r\n            this.consume(_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.CLOSE_PARENTHESIS, \"Expect ')' after expression.\");\r\n            return new Grouping(e1);\r\n        }\r\n\r\n        throw this.error(this.peek(), \"Expect expression\");\r\n    }\r\n    error(token, message) {\r\n        // do something here\r\n        return new Error(message);\r\n    }\r\n    isAtEnd() {\r\n        return this.currToken >= this.tokens.length;\r\n    }\r\n\r\n    advance() {\r\n        if (!this.isAtEnd()) this.currToken++;\r\n        return this.previous();\r\n    }\r\n\r\n    previous() {\r\n        return this.currToken > 0? this.tokens[this.currToken - 1]: null;\r\n    }\r\n\r\n    peekAhead() {\r\n        return this.currToken + 1 < this.tokens.length? this.tokens[this.currToken + 1]: null;\r\n    }\r\n    peek() {\r\n        return this.tokens[this.currToken];\r\n    }\r\n\r\n    match(...types) {\r\n        for (let type of types) {\r\n            if (this.check(type)) {\r\n                this.advance();\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    check(type) {\r\n        if (this.isAtEnd()) return false;\r\n        return this.peek().type == type;\r\n    }\r\n\r\n    consume(type, error) {\r\n        if (this.match(type)) {\r\n            return true;\r\n        }\r\n        throw Error(error);\r\n    }\r\n\r\n    literal() {\r\n        if (this.tokens[this.currToken].type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.STRING) {\r\n            return new Value(NodeTypes.STRING, this.literal);\r\n        } else if (this.tokens[this.currToken].type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.NUMBER) {\r\n            return new Value(NodeTypes.NUMBER, this.literal);\r\n        } else if (this.tokens[this.currToken].type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.TRUE) {\r\n            return new Value(NodeTypes.BOOLEAN, true);\r\n        } else if (this.tokens[this.currToken].type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.FALSE) {\r\n            return new Value(NodeTypes.BOOLEAN, false);\r\n        } else if (this.tokens[this.currToken].type == _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.TokenTypes.NONE) {\r\n            return new Value(NodeTypes.NONE, null);\r\n        }\r\n        return null;\r\n    }\r\n}\r\n\r\n\r\n\n\n//# sourceURL=webpack://HL/./src/Parser.js?");

/***/ }),

/***/ "./src/Tokenizer.js":
/*!**************************!*\
  !*** ./src/Tokenizer.js ***!
  \**************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   KeyColors: () => (/* binding */ KeyColors),\n/* harmony export */   KeyDesc: () => (/* binding */ KeyDesc),\n/* harmony export */   Keywords: () => (/* binding */ Keywords),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   TokenTypes: () => (/* binding */ TokenTypes),\n/* harmony export */   Tokenizer: () => (/* binding */ Tokenizer),\n/* harmony export */   reverseKeywords: () => (/* binding */ reverseKeywords)\n/* harmony export */ });\nlet TokenTypes = Object.freeze({\r\n    LINE_END : 0,\r\n    MINUS : 1,\r\n    ADD : 2,\r\n    MUL : 3,\r\n    DIV : 4,\r\n    NUMBER : 5,\r\n    STRING : 6,\r\n    EQUAL : 7,\r\n    GREATER_THAN : 8,\r\n    LESS_THAN: 9,\r\n    GREATER_THAN_EQUAL_TO : 10,\r\n    LESS_THAN_EQUAL_TO : 11,\r\n    NOT : 12,\r\n    TRUE : 13,\r\n    FALSE: 14,\r\n    AND: 15,\r\n    OR: 16,\r\n    IDENTIFIER: 17,\r\n    OPEN_CURLY: 18,\r\n    CLOSE_CURLY: 19,\r\n    OPEN_PARANTHESIS: 20,\r\n    CLOSE_PARENTHESIS: 21,\r\n    OPEN_BRACKET: 22,\r\n    CLOSE_BRACKET: 23,\r\n    VAR : 24,\r\n    IF : 25,\r\n    ELSE : 26,\r\n    WHILE : 27,\r\n    FOR : 28,\r\n    FUNCTION : 29,\r\n    NONE: 30,\r\n    BANG_EQUAL: 31,\r\n    EQUAL_EQUAL: 32,\r\n    CLASS: 33,\r\n    RETURN: 34,\r\n    PRINT: 35,\r\n    COMMA: 36,\r\n})\r\n\r\n\r\nlet Keywords = {\r\n    \"var\" : TokenTypes.VAR,\r\n    \"if\" : TokenTypes.IF,\r\n    \"else\" : TokenTypes.ELSE,\r\n    \"while\" : TokenTypes.WHILE,\r\n    \"for\" : TokenTypes.FOR,\r\n    \"def\" : TokenTypes.FUNCTION,\r\n    \"True\" : TokenTypes.TRUE,\r\n    \"False\" : TokenTypes.FALSE,\r\n    \"None\" : TokenTypes.NONE,\r\n    \"print\" : TokenTypes.PRINT,\r\n    \"class\" : TokenTypes.CLASS,\r\n    \"return\" : TokenTypes.RETURN,\r\n    \"or\" : TokenTypes.OR,\r\n    \"and\" : TokenTypes.AND,\r\n}\r\n\r\n\r\nlet KeyColors = [\r\n    [\"#f46049\" , TokenTypes.VAR],\r\n    [\"#fbbe5b\" , TokenTypes.IF],\r\n    [\"#fbbe5b\" , TokenTypes.ELSE],\r\n    [\"#fbbe5b\" , TokenTypes.WHILE],\r\n    [\"#fbbe5b\" , TokenTypes.FOR],\r\n    [\"#fbbe5b\" , TokenTypes.FUNCTION],\r\n    [\"#1e9ae0\" , TokenTypes.TRUE],\r\n    [\"#1e9ae0\" , TokenTypes.FALSE],\r\n    [\"#1e9ae0\" , TokenTypes.NONE],\r\n    [\"#fbbe5b\" , TokenTypes.PRINT],\r\n    [\"#fbbe5b\" , TokenTypes.CLASS],\r\n    [\"#f46049\" , TokenTypes.RETURN],\r\n    [\"#fbbe5b\" , TokenTypes.OR],\r\n    [\"#fbbe5b\" , TokenTypes.AND]\r\n]\r\n\r\nlet KeyDesc = [\r\n    [TokenTypes.VAR, \"declares function-scoped or globally-scoped variables, optionally initializing each to a value.\"],\r\n    [TokenTypes.IF, \"executes a statement if a specified condition is truthy\"],\r\n    [TokenTypes.ELSE, \"If the condition is falsy, another statement in the optional else clause will be executed.\"],\r\n    [TokenTypes.WHILE, \"creates a loop that executes a specified statement as long as the test condition evaluates to true.\"],\r\n    [TokenTypes.FOR, \"creates a loop that consists of three optional expressions, enclosed in parentheses and separated by semicolons, followed by a statement to be executed in the loop.\"],\r\n    [TokenTypes.FUNCTION, \"creates a binding of a new function to a given name.\"],\r\n    [TokenTypes.TRUE, \"boolean value equivalent to true\"],\r\n    [TokenTypes.FALSE, \"boolean value equivalent to true\"],\r\n    [TokenTypes.NONE, \"null value\"],\r\n    [TokenTypes.PRINT, \"prints to the output\"],\r\n    [TokenTypes.CLASS, \"creates a class\"],\r\n    [TokenTypes.RETURN, \"ends function execution and specifies a value to be returned to the function caller.\"],\r\n    [TokenTypes.OR, \"boolean operator equivalent to or\"],\r\n    [TokenTypes.AND, \"boolean operator equivalent to and\"]\r\n]\r\n\r\nlet temp2 = {}\r\n\r\nfor (let [key, desc] of KeyDesc) {\r\n    temp2[key] = desc;\r\n}\r\n\r\nKeyDesc = temp2;\r\n\r\n\r\n\r\nlet temp = {};\r\n\r\nfor (let [color, key] of KeyColors) {\r\n    temp[key] = color;\r\n}\r\n\r\nKeyColors = temp;\r\n\r\nlet reverseKeywords = {};\r\n\r\nfor (let [key, value] of Object.entries(Keywords)) {\r\n    reverseKeywords[value] = key;\r\n}\r\n\r\nclass Token {\r\n    constructor(lineno, type, literal) {\r\n        this.lineno = lineno;\r\n        this.type = type;\r\n        this.literal = literal;\r\n    }\r\n    // toString() {\r\n    //     return `Token { Line-No: ${this.lineno}, Type: ${this.type}, Literal: ${this.literal} }`;\r\n    // }\r\n}\r\n\r\nclass Tokenizer {\r\n    constructor() {\r\n        this.tokens = [];\r\n        this.text = \"\";\r\n        this.currIndex = -1;\r\n        this.currLine = 1;\r\n        this.currliteral = \"\";\r\n    }\r\n    parse(text) {\r\n        this.text = text;\r\n        this.currIndex = 0;\r\n        while (this.currIndex < text.length) {\r\n            let c = text[this.currIndex];\r\n            let lineno = this.currLine;\r\n            switch(c) {\r\n                case \"(\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.OPEN_PARANTHESIS, c))\r\n                    break;\r\n                case \")\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.CLOSE_PARENTHESIS, c))\r\n                    break;\r\n                case \"[\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.OPEN_BRACKET, c))\r\n                    break;\r\n                case \"]\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.CLOSE_BRACKET, c))\r\n                    break;\r\n                case \"{\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.OPEN_CURLY, c))\r\n                    break;\r\n                case \"}\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.CLOSE_CURLY, c))\r\n                    break;\r\n                case \"+\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.ADD, c))\r\n                    break;\r\n                case \"-\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.MINUS, c))\r\n                    break;\r\n                case \"*\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.MUL, c))\r\n                    break;\r\n                case \"/\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.DIV, c))\r\n                    break;\r\n                case \";\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.LINE_END, c))\r\n                    break;\r\n                case \"<\":\r\n                    if (this.peek() == \"=\") {\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.LESS_THAN_EQUAL_TO, \"<=\"))\r\n                        break;\r\n                    }\r\n                    this.tokens.push(new Token(lineno, TokenTypes.LESS_THAN, c))\r\n                    break;\r\n                case \">\":\r\n                    if (this.peek() == \"=\") {\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.GREATER_THAN_EQUAL_TO, \">=\"))\r\n                        break;\r\n                    }\r\n                    this.tokens.push(new Token(lineno, TokenTypes.GREATER_THAN, c))\r\n                    break;\r\n                case \"=\":\r\n                    if (this.peek() == '=') {\r\n                        console.log(\"parising double equal\", lineno);\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.EQUAL_EQUAL, \"==\"))\r\n                        break;\r\n                    }\r\n                    this.tokens.push(new Token(lineno, TokenTypes.EQUAL, c))\r\n                    break;\r\n                case \",\":\r\n                    this.tokens.push(new Token(lineno, TokenTypes.COMMA, c))\r\n                    break;\r\n                case \"!\":\r\n                    if (this.peek() == \"=\") {\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.BANG_EQUAL, \"!=\"))\r\n                        break;\r\n                    }\r\n                    this.tokens.push(new Token(lineno, TokenTypes.NOT, c))\r\n                    break;\r\n                case \"&\":\r\n                    if (this.peek() == \"&\") {\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.AND, \"&&\"));\r\n                    }\r\n                    else throw Error(\"Unidentified Token\");\r\n                    break;\r\n                case \"|\":\r\n                    if (this.peek() == '|') {\r\n                        this.currIndex += 1;\r\n                        this.tokens.push(new Token(lineno, TokenTypes.OR, \"||\"));\r\n                    }\r\n                    else throw Error(\"Unidentified Token\");\r\n                    break;\r\n                case \"\\n\":\r\n                    this.currLine++;\r\n                    break;\r\n                case \"\\\"\":\r\n                case \"'\":\r\n                    this.string_l(c);\r\n                    break;\r\n                default:\r\n                    if (this.isNumber(c)) {\r\n                        this.number_l();\r\n                    } else if (this.isLetter(c)) {\r\n                        this.identifier_l();\r\n                    }\r\n            }\r\n            this.currIndex++;\r\n        }\r\n        let t = this.tokens\r\n        this.tokens = [];\r\n        this.currIndex = -1;\r\n        this.currliteral = \"\";\r\n        this.currLine = 1;\r\n        return t;\r\n    }\r\n    string_l(c) {\r\n        let i = this.currIndex;\r\n        let escaping = false;\r\n        let string_building = \"\";\r\n        let map = {\r\n            \"a\" : \"\\a\",\r\n            \"b\" : \"\\b\",\r\n            \"f\" : \"\\f\",\r\n            \"n\" : \"\\n\",\r\n            \"r\" : \"\\r\",\r\n            \"t\" : \"\\t\",\r\n            \"v\" : \"\\v\",\r\n        }\r\n        while (this.peek() != null && (this.peek() !== c || escaping)) {\r\n            if (this.peek() == \"\\\\\" && !escaping) {\r\n                escaping = true;\r\n            } else if (escaping) {\r\n                let t = this.peek();\r\n                if (this.peek() in map) t = map[this.peek()];\r\n                string_building += t;\r\n                escaping = false;\r\n            } else {\r\n                string_building += this.peek();\r\n            }\r\n            this.currIndex++;\r\n        }\r\n        if (this.peek() === null) {\r\n            throw Error(\"String not ending\");\r\n        }\r\n        // let literal = this.text.slice(i + 1, this.currIndex + 1);\r\n        this.currIndex++;\r\n        this.tokens.push(new Token(this.currLine, TokenTypes.STRING, string_building));\r\n    }\r\n    identifier_l() {\r\n        let i = this.currIndex;\r\n        while (this.isAlphaNumeric(this.peek())) {\r\n            this.currIndex++;\r\n        }\r\n        let literal = this.text.slice(i, this.currIndex + 1);\r\n        if (literal in Keywords) {\r\n            this.tokens.push(new Token(this.currLine, Keywords[literal], literal));\r\n            return;\r\n        }\r\n        this.tokens.push(new Token(this.currLine, TokenTypes.IDENTIFIER, literal));\r\n    }\r\n    isAlphaNumeric(c) {\r\n        return c != null  && (this.isLetter(c) || this.isNumber(c));\r\n    }\r\n    isLetter(c) {\r\n        if (c == null) return false;\r\n        let t = c.charCodeAt(0);\r\n        return (t >= 65 && t < 91) || (t >= 97 && t < 123);\r\n    }\r\n    isNumber(c) {\r\n        if (c == null) return false;\r\n        let t = c.charCodeAt(0);\r\n        return (t >= 48 && t < 58);\r\n    }\r\n    number_l() {\r\n        let i = this.currIndex;\r\n        while (!isNaN(this.peek() - 0)) {\r\n            this.currIndex++;\r\n        }\r\n        if (this.match(\".\")) {\r\n            while(!isNaN(this.peek() - 0)) {\r\n                this.currIndex++;\r\n            }\r\n        }\r\n        let literal = this.text.slice(i, this.currIndex + 1);\r\n        this.tokens.push(new Token(this.currLine, TokenTypes.NUMBER, literal));\r\n    }\r\n    peek() {\r\n        return this.currIndex + 1 < this.text.length? this.text[this.currIndex + 1]: null;\r\n    }\r\n    match(c) {\r\n        if (c == this.peek()) {\r\n            this.currIndex++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\n\n\n//# sourceURL=webpack://HL/./src/Tokenizer.js?");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   hl: () => (/* binding */ hl)\n/* harmony export */ });\n/* harmony import */ var _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Tokenizer.js */ \"./src/Tokenizer.js\");\n/* harmony import */ var _Parser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Parser.js */ \"./src/Parser.js\");\n/* harmony import */ var _Interpreter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Interpreter.js */ \"./src/Interpreter.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nclass HL {\r\n    run(text, out) {\r\n        let tokeizer = new _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.Tokenizer();\r\n        let tokens = tokeizer.parse(text);\r\n        console.log(tokens);\r\n        let parser = new _Parser_js__WEBPACK_IMPORTED_MODULE_1__.Parser(tokens);\r\n        let statements = parser.run();\r\n        console.log(statements);\r\n        let interpreter = new _Interpreter_js__WEBPACK_IMPORTED_MODULE_2__.Interpreter(statements, out);\r\n        interpreter.run();\r\n    }\r\n    getKeywords() {\r\n        return _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.Keywords;\r\n    }\r\n    getReverseKeywords() {\r\n        return _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.reverseKeywords;\r\n    }\r\n    setKeyword(pid, nkey) {\r\n        delete _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.Keywords[_Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.reverseKeywords[Number(pid)]];\r\n        _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.Keywords[nkey] = Number(pid);\r\n        _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.reverseKeywords[Number(pid)] = nkey;\r\n    }\r\n    getKeyColors() {\r\n        return _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.KeyColors;\r\n    }\r\n    getKeyDesc() {\r\n        return _Tokenizer_js__WEBPACK_IMPORTED_MODULE_0__.KeyDesc;\r\n    }\r\n}\r\n\r\nlet hl = new HL();\r\n\r\n\r\n\r\n\n\n//# sourceURL=webpack://HL/./src/index.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	HL = __webpack_exports__;
/******/ 	
/******/ })()
;